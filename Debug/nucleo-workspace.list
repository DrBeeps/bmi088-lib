
nucleo-workspace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080028d8  080028d8  000128d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002924  08002924  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002924  08002924  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002924  08002924  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002924  08002924  00012924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002928  08002928  00012928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800292c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08002938  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002938  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ea5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016c4  00000000  00000000  00028eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0002a5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017154  00000000  00000000  0002b670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a221  00000000  00000000  000427c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084683  00000000  00000000  0004c9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000234c  00000000  00000000  000d10bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028c0 	.word	0x080028c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080028c0 	.word	0x080028c0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <printDebug>:
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

void printDebug(char *buf)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f7ff fff1 	bl	800014c <strlen>
 800016a:	4603      	mov	r3, r0
 800016c:	b29a      	uxth	r2, r3
 800016e:	f04f 33ff 	mov.w	r3, #4294967295
 8000172:	6879      	ldr	r1, [r7, #4]
 8000174:	4803      	ldr	r0, [pc, #12]	; (8000184 <printDebug+0x28>)
 8000176:	f002 fa0c 	bl	8002592 <HAL_UART_Transmit>
}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	2000009c 	.word	0x2000009c

08000188 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b096      	sub	sp, #88	; 0x58
 800018c:	af04      	add	r7, sp, #16
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800018e:	f000 fa55 	bl	800063c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000192:	f000 f83b 	bl	800020c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000196:	f000 f8d3 	bl	8000340 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 800019a:	f000 f8a7 	bl	80002ec <MX_USART2_UART_Init>
    MX_I2C1_Init();
 800019e:	f000 f877 	bl	8000290 <MX_I2C1_Init>
    /* USER CODE BEGIN 2 */

    /* Initialize IMU */
    printDebug("Attempting Init...");
 80001a2:	4816      	ldr	r0, [pc, #88]	; (80001fc <main+0x74>)
 80001a4:	f7ff ffda 	bl	800015c <printDebug>
    HAL_Delay(500);
 80001a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001ac:	f000 faa8 	bl	8000700 <HAL_Delay>
     */

    uint8_t comtxBuf[2];

    /* Soft reset */
    comtxBuf[0] = BMI088_ACC_SOFTRESET; comtxBuf[1] = 0xB6;
 80001b0:	237e      	movs	r3, #126	; 0x7e
 80001b2:	713b      	strb	r3, [r7, #4]
 80001b4:	23b6      	movs	r3, #182	; 0xb6
 80001b6:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 80001b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80001bc:	2364      	movs	r3, #100	; 0x64
 80001be:	9300      	str	r3, [sp, #0]
 80001c0:	2302      	movs	r3, #2
 80001c2:	2132      	movs	r1, #50	; 0x32
 80001c4:	480e      	ldr	r0, [pc, #56]	; (8000200 <main+0x78>)
 80001c6:	f000 fecf 	bl	8000f68 <HAL_I2C_Master_Transmit>

    HAL_Delay(50);
 80001ca:	2032      	movs	r0, #50	; 0x32
 80001cc:	f000 fa98 	bl	8000700 <HAL_Delay>

    /* Check chip ID */
    uint8_t chipID;
    debugTest = 0;
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <main+0x7c>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c1, BMI088_ACC_I2C_ADDR, BMI088_ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &chipID, 1, BMI088_I2C_TIMEOUT);
 80001d6:	2364      	movs	r3, #100	; 0x64
 80001d8:	9302      	str	r3, [sp, #8]
 80001da:	2301      	movs	r3, #1
 80001dc:	9301      	str	r3, [sp, #4]
 80001de:	1cfb      	adds	r3, r7, #3
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	2301      	movs	r3, #1
 80001e4:	2200      	movs	r2, #0
 80001e6:	2132      	movs	r1, #50	; 0x32
 80001e8:	4805      	ldr	r0, [pc, #20]	; (8000200 <main+0x78>)
 80001ea:	f000 ffbb 	bl	8001164 <HAL_I2C_Mem_Read>

    if (chipID != 0x1E)
 80001ee:	78fb      	ldrb	r3, [r7, #3]
 80001f0:	2b1e      	cmp	r3, #30
 80001f2:	d002      	beq.n	80001fa <main+0x72>
    {
        printDebug("chipID != 0x1E");
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <main+0x80>)
 80001f6:	f7ff ffb1 	bl	800015c <printDebug>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 80001fa:	e7fe      	b.n	80001fa <main+0x72>
 80001fc:	080028d8 	.word	0x080028d8
 8000200:	20000048 	.word	0x20000048
 8000204:	20000028 	.word	0x20000028
 8000208:	080028ec 	.word	0x080028ec

0800020c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	; 0x40
 8000210:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f002 fb48 	bl	80028b0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800023e:	2300      	movs	r3, #0
 8000240:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000242:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000246:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	f107 0318 	add.w	r3, r7, #24
 800024c:	4618      	mov	r0, r3
 800024e:	f001 fd37 	bl	8001cc0 <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x50>
    {
        Error_Handler();
 8000258:	f000 f8e0 	bl	800041c <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	607b      	str	r3, [r7, #4]
            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000260:	2302      	movs	r3, #2
 8000262:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2102      	movs	r1, #2
 8000276:	4618      	mov	r0, r3
 8000278:	f001 ffa2 	bl	80021c0 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x7a>
    {
        Error_Handler();
 8000282:	f000 f8cb 	bl	800041c <Error_Handler>
    }
}
 8000286:	bf00      	nop
 8000288:	3740      	adds	r7, #64	; 0x40
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_I2C1_Init+0x50>)
 8000296:	4a13      	ldr	r2, [pc, #76]	; (80002e4 <MX_I2C1_Init+0x54>)
 8000298:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 800029a:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <MX_I2C1_Init+0x50>)
 800029c:	4a12      	ldr	r2, [pc, #72]	; (80002e8 <MX_I2C1_Init+0x58>)
 800029e:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002b2:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002cc:	4804      	ldr	r0, [pc, #16]	; (80002e0 <MX_I2C1_Init+0x50>)
 80002ce:	f000 fd07 	bl	8000ce0 <HAL_I2C_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 80002d8:	f000 f8a0 	bl	800041c <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000048 	.word	0x20000048
 80002e4:	40005400 	.word	0x40005400
 80002e8:	000186a0 	.word	0x000186a0

080002ec <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 80002f0:	4b11      	ldr	r3, [pc, #68]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 80002f2:	4a12      	ldr	r2, [pc, #72]	; (800033c <MX_USART2_UART_Init+0x50>)
 80002f4:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80002f6:	4b10      	ldr	r3, [pc, #64]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 80002f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002fc:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000312:	220c      	movs	r2, #12
 8000314:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000324:	f002 f8e8 	bl	80024f8 <HAL_UART_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 800032e:	f000 f875 	bl	800041c <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	2000009c 	.word	0x2000009c
 800033c:	40004400 	.word	0x40004400

08000340 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b088      	sub	sp, #32
 8000344:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000354:	4b2d      	ldr	r3, [pc, #180]	; (800040c <MX_GPIO_Init+0xcc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a2c      	ldr	r2, [pc, #176]	; (800040c <MX_GPIO_Init+0xcc>)
 800035a:	f043 0310 	orr.w	r3, r3, #16
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b2a      	ldr	r3, [pc, #168]	; (800040c <MX_GPIO_Init+0xcc>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0310 	and.w	r3, r3, #16
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800036c:	4b27      	ldr	r3, [pc, #156]	; (800040c <MX_GPIO_Init+0xcc>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a26      	ldr	r2, [pc, #152]	; (800040c <MX_GPIO_Init+0xcc>)
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b24      	ldr	r3, [pc, #144]	; (800040c <MX_GPIO_Init+0xcc>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0320 	and.w	r3, r3, #32
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000384:	4b21      	ldr	r3, [pc, #132]	; (800040c <MX_GPIO_Init+0xcc>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a20      	ldr	r2, [pc, #128]	; (800040c <MX_GPIO_Init+0xcc>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b1e      	ldr	r3, [pc, #120]	; (800040c <MX_GPIO_Init+0xcc>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0304 	and.w	r3, r3, #4
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <MX_GPIO_Init+0xcc>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a1a      	ldr	r2, [pc, #104]	; (800040c <MX_GPIO_Init+0xcc>)
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b18      	ldr	r3, [pc, #96]	; (800040c <MX_GPIO_Init+0xcc>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	603b      	str	r3, [r7, #0]
 80003b2:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2120      	movs	r1, #32
 80003b8:	4815      	ldr	r0, [pc, #84]	; (8000410 <MX_GPIO_Init+0xd0>)
 80003ba:	f000 fc57 	bl	8000c6c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 80003be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <MX_GPIO_Init+0xd4>)
 80003c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003cc:	f107 0310 	add.w	r3, r7, #16
 80003d0:	4619      	mov	r1, r3
 80003d2:	4811      	ldr	r0, [pc, #68]	; (8000418 <MX_GPIO_Init+0xd8>)
 80003d4:	f000 fac6 	bl	8000964 <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 80003d8:	2320      	movs	r3, #32
 80003da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003dc:	2301      	movs	r3, #1
 80003de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	2302      	movs	r3, #2
 80003e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003e8:	f107 0310 	add.w	r3, r7, #16
 80003ec:	4619      	mov	r1, r3
 80003ee:	4808      	ldr	r0, [pc, #32]	; (8000410 <MX_GPIO_Init+0xd0>)
 80003f0:	f000 fab8 	bl	8000964 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2100      	movs	r1, #0
 80003f8:	2028      	movs	r0, #40	; 0x28
 80003fa:	f000 fa7c 	bl	80008f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003fe:	2028      	movs	r0, #40	; 0x28
 8000400:	f000 fa95 	bl	800092e <HAL_NVIC_EnableIRQ>

}
 8000404:	bf00      	nop
 8000406:	3720      	adds	r7, #32
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40021000 	.word	0x40021000
 8000410:	40010800 	.word	0x40010800
 8000414:	10110000 	.word	0x10110000
 8000418:	40011000 	.word	0x40011000

0800041c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000424:	e7fe      	b.n	8000424 <Error_Handler+0x8>
	...

08000428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <HAL_MspInit+0x5c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a14      	ldr	r2, [pc, #80]	; (8000484 <HAL_MspInit+0x5c>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <HAL_MspInit+0x5c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <HAL_MspInit+0x5c>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000450:	61d3      	str	r3, [r2, #28]
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_MspInit+0x60>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <HAL_MspInit+0x60>)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	40021000 	.word	0x40021000
 8000488:	40010000 	.word	0x40010000

0800048c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a15      	ldr	r2, [pc, #84]	; (80004fc <HAL_I2C_MspInit+0x70>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d123      	bne.n	80004f4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <HAL_I2C_MspInit+0x74>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a13      	ldr	r2, [pc, #76]	; (8000500 <HAL_I2C_MspInit+0x74>)
 80004b2:	f043 0308 	orr.w	r3, r3, #8
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <HAL_I2C_MspInit+0x74>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0308 	and.w	r3, r3, #8
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004c4:	23c0      	movs	r3, #192	; 0xc0
 80004c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004c8:	2312      	movs	r3, #18
 80004ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004cc:	2303      	movs	r3, #3
 80004ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	480b      	ldr	r0, [pc, #44]	; (8000504 <HAL_I2C_MspInit+0x78>)
 80004d8:	f000 fa44 	bl	8000964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_I2C_MspInit+0x74>)
 80004de:	69db      	ldr	r3, [r3, #28]
 80004e0:	4a07      	ldr	r2, [pc, #28]	; (8000500 <HAL_I2C_MspInit+0x74>)
 80004e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e6:	61d3      	str	r3, [r2, #28]
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_I2C_MspInit+0x74>)
 80004ea:	69db      	ldr	r3, [r3, #28]
 80004ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40005400 	.word	0x40005400
 8000500:	40021000 	.word	0x40021000
 8000504:	40010c00 	.word	0x40010c00

08000508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a15      	ldr	r2, [pc, #84]	; (8000578 <HAL_UART_MspInit+0x70>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d123      	bne.n	8000570 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <HAL_UART_MspInit+0x74>)
 800052a:	69db      	ldr	r3, [r3, #28]
 800052c:	4a13      	ldr	r2, [pc, #76]	; (800057c <HAL_UART_MspInit+0x74>)
 800052e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000532:	61d3      	str	r3, [r2, #28]
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <HAL_UART_MspInit+0x74>)
 8000536:	69db      	ldr	r3, [r3, #28]
 8000538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <HAL_UART_MspInit+0x74>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <HAL_UART_MspInit+0x74>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <HAL_UART_MspInit+0x74>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000558:	230c      	movs	r3, #12
 800055a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055c:	2302      	movs	r3, #2
 800055e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2302      	movs	r3, #2
 8000562:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	4619      	mov	r1, r3
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <HAL_UART_MspInit+0x78>)
 800056c:	f000 f9fa 	bl	8000964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40004400 	.word	0x40004400
 800057c:	40021000 	.word	0x40021000
 8000580:	40010800 	.word	0x40010800

08000584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <NMI_Handler+0x4>

0800058a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <HardFault_Handler+0x4>

08000590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <MemManage_Handler+0x4>

08000596 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ca:	f000 f87d 	bl	80006c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80005d6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005da:	f000 fb5f 	bl	8000c9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
	...

080005f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005f2:	e003      	b.n	80005fc <LoopCopyDataInit>

080005f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005fa:	3104      	adds	r1, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005fc:	480a      	ldr	r0, [pc, #40]	; (8000628 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000600:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000602:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000604:	d3f6      	bcc.n	80005f4 <CopyDataInit>
  ldr r2, =_sbss
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000608:	e002      	b.n	8000610 <LoopFillZerobss>

0800060a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800060c:	f842 3b04 	str.w	r3, [r2], #4

08000610 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000612:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000614:	d3f9      	bcc.n	800060a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000616:	f7ff ffe4 	bl	80005e2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800061a:	f002 f925 	bl	8002868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061e:	f7ff fdb3 	bl	8000188 <main>
  bx lr
 8000622:	4770      	bx	lr
  ldr r3, =_sidata
 8000624:	0800292c 	.word	0x0800292c
  ldr r0, =_sdata
 8000628:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800062c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000630:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000634:	200000e0 	.word	0x200000e0

08000638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC1_2_IRQHandler>
	...

0800063c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <HAL_Init+0x28>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a07      	ldr	r2, [pc, #28]	; (8000664 <HAL_Init+0x28>)
 8000646:	f043 0310 	orr.w	r3, r3, #16
 800064a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064c:	2003      	movs	r0, #3
 800064e:	f000 f947 	bl	80008e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000652:	2000      	movs	r0, #0
 8000654:	f000 f808 	bl	8000668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000658:	f7ff fee6 	bl	8000428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40022000 	.word	0x40022000

08000668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_InitTick+0x54>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_InitTick+0x58>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000682:	fbb2 f3f3 	udiv	r3, r2, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f95f 	bl	800094a <HAL_SYSTICK_Config>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	e00e      	b.n	80006b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b0f      	cmp	r3, #15
 800069a:	d80a      	bhi.n	80006b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800069c:	2200      	movs	r2, #0
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	f04f 30ff 	mov.w	r0, #4294967295
 80006a4:	f000 f927 	bl	80008f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a8:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <HAL_InitTick+0x5c>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e000      	b.n	80006b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000008 	.word	0x20000008
 80006c4:	20000004 	.word	0x20000004

080006c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <HAL_IncTick+0x1c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_IncTick+0x20>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	4a03      	ldr	r2, [pc, #12]	; (80006e8 <HAL_IncTick+0x20>)
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	20000008 	.word	0x20000008
 80006e8:	200000dc 	.word	0x200000dc

080006ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return uwTick;
 80006f0:	4b02      	ldr	r3, [pc, #8]	; (80006fc <HAL_GetTick+0x10>)
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	200000dc 	.word	0x200000dc

08000700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000708:	f7ff fff0 	bl	80006ec <HAL_GetTick>
 800070c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000718:	d005      	beq.n	8000726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <HAL_Delay+0x44>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	4413      	add	r3, r2
 8000724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000726:	bf00      	nop
 8000728:	f7ff ffe0 	bl	80006ec <HAL_GetTick>
 800072c:	4602      	mov	r2, r0
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	429a      	cmp	r2, r3
 8000736:	d8f7      	bhi.n	8000728 <HAL_Delay+0x28>
  {
  }
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000008 	.word	0x20000008

08000748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000764:	4013      	ands	r3, r2
 8000766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077a:	4a04      	ldr	r2, [pc, #16]	; (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	60d3      	str	r3, [r2, #12]
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	0a1b      	lsrs	r3, r3, #8
 800079a:	f003 0307 	and.w	r3, r3, #7
}
 800079e:	4618      	mov	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	db0b      	blt.n	80007d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	f003 021f 	and.w	r2, r3, #31
 80007c4:	4906      	ldr	r1, [pc, #24]	; (80007e0 <__NVIC_EnableIRQ+0x34>)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	095b      	lsrs	r3, r3, #5
 80007cc:	2001      	movs	r0, #1
 80007ce:	fa00 f202 	lsl.w	r2, r0, r2
 80007d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	e000e100 	.word	0xe000e100

080007e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	6039      	str	r1, [r7, #0]
 80007ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	db0a      	blt.n	800080e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	490c      	ldr	r1, [pc, #48]	; (8000830 <__NVIC_SetPriority+0x4c>)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	0112      	lsls	r2, r2, #4
 8000804:	b2d2      	uxtb	r2, r2
 8000806:	440b      	add	r3, r1
 8000808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800080c:	e00a      	b.n	8000824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4908      	ldr	r1, [pc, #32]	; (8000834 <__NVIC_SetPriority+0x50>)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	f003 030f 	and.w	r3, r3, #15
 800081a:	3b04      	subs	r3, #4
 800081c:	0112      	lsls	r2, r2, #4
 800081e:	b2d2      	uxtb	r2, r2
 8000820:	440b      	add	r3, r1
 8000822:	761a      	strb	r2, [r3, #24]
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000e100 	.word	0xe000e100
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000838:	b480      	push	{r7}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	f1c3 0307 	rsb	r3, r3, #7
 8000852:	2b04      	cmp	r3, #4
 8000854:	bf28      	it	cs
 8000856:	2304      	movcs	r3, #4
 8000858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	3304      	adds	r3, #4
 800085e:	2b06      	cmp	r3, #6
 8000860:	d902      	bls.n	8000868 <NVIC_EncodePriority+0x30>
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	3b03      	subs	r3, #3
 8000866:	e000      	b.n	800086a <NVIC_EncodePriority+0x32>
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	f04f 32ff 	mov.w	r2, #4294967295
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43da      	mvns	r2, r3
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	401a      	ands	r2, r3
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000880:	f04f 31ff 	mov.w	r1, #4294967295
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	fa01 f303 	lsl.w	r3, r1, r3
 800088a:	43d9      	mvns	r1, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000890:	4313      	orrs	r3, r2
         );
}
 8000892:	4618      	mov	r0, r3
 8000894:	3724      	adds	r7, #36	; 0x24
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008ac:	d301      	bcc.n	80008b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00f      	b.n	80008d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <SysTick_Config+0x40>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ba:	210f      	movs	r1, #15
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f7ff ff90 	bl	80007e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <SysTick_Config+0x40>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <SysTick_Config+0x40>)
 80008cc:	2207      	movs	r2, #7
 80008ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	e000e010 	.word	0xe000e010

080008e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ff2d 	bl	8000748 <__NVIC_SetPriorityGrouping>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b086      	sub	sp, #24
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	4603      	mov	r3, r0
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
 8000902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000908:	f7ff ff42 	bl	8000790 <__NVIC_GetPriorityGrouping>
 800090c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	68b9      	ldr	r1, [r7, #8]
 8000912:	6978      	ldr	r0, [r7, #20]
 8000914:	f7ff ff90 	bl	8000838 <NVIC_EncodePriority>
 8000918:	4602      	mov	r2, r0
 800091a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff5f 	bl	80007e4 <__NVIC_SetPriority>
}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff35 	bl	80007ac <__NVIC_EnableIRQ>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ffa2 	bl	800089c <SysTick_Config>
 8000958:	4603      	mov	r3, r0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000964:	b480      	push	{r7}
 8000966:	b08b      	sub	sp, #44	; 0x2c
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000976:	e169      	b.n	8000c4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000978:	2201      	movs	r2, #1
 800097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	69fa      	ldr	r2, [r7, #28]
 8000988:	4013      	ands	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	429a      	cmp	r2, r3
 8000992:	f040 8158 	bne.w	8000c46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	4a9a      	ldr	r2, [pc, #616]	; (8000c04 <HAL_GPIO_Init+0x2a0>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d05e      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
 80009a0:	4a98      	ldr	r2, [pc, #608]	; (8000c04 <HAL_GPIO_Init+0x2a0>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d875      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009a6:	4a98      	ldr	r2, [pc, #608]	; (8000c08 <HAL_GPIO_Init+0x2a4>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d058      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
 80009ac:	4a96      	ldr	r2, [pc, #600]	; (8000c08 <HAL_GPIO_Init+0x2a4>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d86f      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009b2:	4a96      	ldr	r2, [pc, #600]	; (8000c0c <HAL_GPIO_Init+0x2a8>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d052      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
 80009b8:	4a94      	ldr	r2, [pc, #592]	; (8000c0c <HAL_GPIO_Init+0x2a8>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d869      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009be:	4a94      	ldr	r2, [pc, #592]	; (8000c10 <HAL_GPIO_Init+0x2ac>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d04c      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
 80009c4:	4a92      	ldr	r2, [pc, #584]	; (8000c10 <HAL_GPIO_Init+0x2ac>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d863      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009ca:	4a92      	ldr	r2, [pc, #584]	; (8000c14 <HAL_GPIO_Init+0x2b0>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d046      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
 80009d0:	4a90      	ldr	r2, [pc, #576]	; (8000c14 <HAL_GPIO_Init+0x2b0>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d85d      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009d6:	2b12      	cmp	r3, #18
 80009d8:	d82a      	bhi.n	8000a30 <HAL_GPIO_Init+0xcc>
 80009da:	2b12      	cmp	r3, #18
 80009dc:	d859      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009de:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <HAL_GPIO_Init+0x80>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	08000a5f 	.word	0x08000a5f
 80009e8:	08000a39 	.word	0x08000a39
 80009ec:	08000a4b 	.word	0x08000a4b
 80009f0:	08000a8d 	.word	0x08000a8d
 80009f4:	08000a93 	.word	0x08000a93
 80009f8:	08000a93 	.word	0x08000a93
 80009fc:	08000a93 	.word	0x08000a93
 8000a00:	08000a93 	.word	0x08000a93
 8000a04:	08000a93 	.word	0x08000a93
 8000a08:	08000a93 	.word	0x08000a93
 8000a0c:	08000a93 	.word	0x08000a93
 8000a10:	08000a93 	.word	0x08000a93
 8000a14:	08000a93 	.word	0x08000a93
 8000a18:	08000a93 	.word	0x08000a93
 8000a1c:	08000a93 	.word	0x08000a93
 8000a20:	08000a93 	.word	0x08000a93
 8000a24:	08000a93 	.word	0x08000a93
 8000a28:	08000a41 	.word	0x08000a41
 8000a2c:	08000a55 	.word	0x08000a55
 8000a30:	4a79      	ldr	r2, [pc, #484]	; (8000c18 <HAL_GPIO_Init+0x2b4>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d013      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a36:	e02c      	b.n	8000a92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	623b      	str	r3, [r7, #32]
          break;
 8000a3e:	e029      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	3304      	adds	r3, #4
 8000a46:	623b      	str	r3, [r7, #32]
          break;
 8000a48:	e024      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	3308      	adds	r3, #8
 8000a50:	623b      	str	r3, [r7, #32]
          break;
 8000a52:	e01f      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	330c      	adds	r3, #12
 8000a5a:	623b      	str	r3, [r7, #32]
          break;
 8000a5c:	e01a      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d102      	bne.n	8000a6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a66:	2304      	movs	r3, #4
 8000a68:	623b      	str	r3, [r7, #32]
          break;
 8000a6a:	e013      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d105      	bne.n	8000a80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a74:	2308      	movs	r3, #8
 8000a76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	69fa      	ldr	r2, [r7, #28]
 8000a7c:	611a      	str	r2, [r3, #16]
          break;
 8000a7e:	e009      	b.n	8000a94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a80:	2308      	movs	r3, #8
 8000a82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	69fa      	ldr	r2, [r7, #28]
 8000a88:	615a      	str	r2, [r3, #20]
          break;
 8000a8a:	e003      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
          break;
 8000a90:	e000      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          break;
 8000a92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	2bff      	cmp	r3, #255	; 0xff
 8000a98:	d801      	bhi.n	8000a9e <HAL_GPIO_Init+0x13a>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	e001      	b.n	8000aa2 <HAL_GPIO_Init+0x13e>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	2bff      	cmp	r3, #255	; 0xff
 8000aa8:	d802      	bhi.n	8000ab0 <HAL_GPIO_Init+0x14c>
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	e002      	b.n	8000ab6 <HAL_GPIO_Init+0x152>
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	3b08      	subs	r3, #8
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	210f      	movs	r1, #15
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	6a39      	ldr	r1, [r7, #32]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	431a      	orrs	r2, r3
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f000 80b1 	beq.w	8000c46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae4:	4b4d      	ldr	r3, [pc, #308]	; (8000c1c <HAL_GPIO_Init+0x2b8>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a4c      	ldr	r2, [pc, #304]	; (8000c1c <HAL_GPIO_Init+0x2b8>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b4a      	ldr	r3, [pc, #296]	; (8000c1c <HAL_GPIO_Init+0x2b8>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000afc:	4a48      	ldr	r2, [pc, #288]	; (8000c20 <HAL_GPIO_Init+0x2bc>)
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	3302      	adds	r3, #2
 8000b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	f003 0303 	and.w	r3, r3, #3
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	220f      	movs	r2, #15
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a40      	ldr	r2, [pc, #256]	; (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d013      	beq.n	8000b50 <HAL_GPIO_Init+0x1ec>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a3f      	ldr	r2, [pc, #252]	; (8000c28 <HAL_GPIO_Init+0x2c4>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d00d      	beq.n	8000b4c <HAL_GPIO_Init+0x1e8>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a3e      	ldr	r2, [pc, #248]	; (8000c2c <HAL_GPIO_Init+0x2c8>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d007      	beq.n	8000b48 <HAL_GPIO_Init+0x1e4>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a3d      	ldr	r2, [pc, #244]	; (8000c30 <HAL_GPIO_Init+0x2cc>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d101      	bne.n	8000b44 <HAL_GPIO_Init+0x1e0>
 8000b40:	2303      	movs	r3, #3
 8000b42:	e006      	b.n	8000b52 <HAL_GPIO_Init+0x1ee>
 8000b44:	2304      	movs	r3, #4
 8000b46:	e004      	b.n	8000b52 <HAL_GPIO_Init+0x1ee>
 8000b48:	2302      	movs	r3, #2
 8000b4a:	e002      	b.n	8000b52 <HAL_GPIO_Init+0x1ee>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e000      	b.n	8000b52 <HAL_GPIO_Init+0x1ee>
 8000b50:	2300      	movs	r3, #0
 8000b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b54:	f002 0203 	and.w	r2, r2, #3
 8000b58:	0092      	lsls	r2, r2, #2
 8000b5a:	4093      	lsls	r3, r2
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b62:	492f      	ldr	r1, [pc, #188]	; (8000c20 <HAL_GPIO_Init+0x2bc>)
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	3302      	adds	r3, #2
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d006      	beq.n	8000b8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b7c:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <HAL_GPIO_Init+0x2d0>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	492c      	ldr	r1, [pc, #176]	; (8000c34 <HAL_GPIO_Init+0x2d0>)
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	600b      	str	r3, [r1, #0]
 8000b88:	e006      	b.n	8000b98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b8a:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <HAL_GPIO_Init+0x2d0>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	4928      	ldr	r1, [pc, #160]	; (8000c34 <HAL_GPIO_Init+0x2d0>)
 8000b94:	4013      	ands	r3, r2
 8000b96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d006      	beq.n	8000bb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <HAL_GPIO_Init+0x2d0>)
 8000ba6:	685a      	ldr	r2, [r3, #4]
 8000ba8:	4922      	ldr	r1, [pc, #136]	; (8000c34 <HAL_GPIO_Init+0x2d0>)
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	604b      	str	r3, [r1, #4]
 8000bb0:	e006      	b.n	8000bc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <HAL_GPIO_Init+0x2d0>)
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	491e      	ldr	r1, [pc, #120]	; (8000c34 <HAL_GPIO_Init+0x2d0>)
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d006      	beq.n	8000bda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_GPIO_Init+0x2d0>)
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	4918      	ldr	r1, [pc, #96]	; (8000c34 <HAL_GPIO_Init+0x2d0>)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	608b      	str	r3, [r1, #8]
 8000bd8:	e006      	b.n	8000be8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_GPIO_Init+0x2d0>)
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	4914      	ldr	r1, [pc, #80]	; (8000c34 <HAL_GPIO_Init+0x2d0>)
 8000be4:	4013      	ands	r3, r2
 8000be6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d021      	beq.n	8000c38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_GPIO_Init+0x2d0>)
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	490e      	ldr	r1, [pc, #56]	; (8000c34 <HAL_GPIO_Init+0x2d0>)
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	60cb      	str	r3, [r1, #12]
 8000c00:	e021      	b.n	8000c46 <HAL_GPIO_Init+0x2e2>
 8000c02:	bf00      	nop
 8000c04:	10320000 	.word	0x10320000
 8000c08:	10310000 	.word	0x10310000
 8000c0c:	10220000 	.word	0x10220000
 8000c10:	10210000 	.word	0x10210000
 8000c14:	10120000 	.word	0x10120000
 8000c18:	10110000 	.word	0x10110000
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010000 	.word	0x40010000
 8000c24:	40010800 	.word	0x40010800
 8000c28:	40010c00 	.word	0x40010c00
 8000c2c:	40011000 	.word	0x40011000
 8000c30:	40011400 	.word	0x40011400
 8000c34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_GPIO_Init+0x304>)
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	4909      	ldr	r1, [pc, #36]	; (8000c68 <HAL_GPIO_Init+0x304>)
 8000c42:	4013      	ands	r3, r2
 8000c44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	3301      	adds	r3, #1
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	fa22 f303 	lsr.w	r3, r2, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f47f ae8e 	bne.w	8000978 <HAL_GPIO_Init+0x14>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	372c      	adds	r7, #44	; 0x2c
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	40010400 	.word	0x40010400

08000c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c7c:	787b      	ldrb	r3, [r7, #1]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c82:	887a      	ldrh	r2, [r7, #2]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c88:	e003      	b.n	8000c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c8a:	887b      	ldrh	r3, [r7, #2]
 8000c8c:	041a      	lsls	r2, r3, #16
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	611a      	str	r2, [r3, #16]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ca8:	695a      	ldr	r2, [r3, #20]
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d006      	beq.n	8000cc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f806 	bl	8000ccc <HAL_GPIO_EXTI_Callback>
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40010400 	.word	0x40010400

08000ccc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e12b      	b.n	8000f4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d106      	bne.n	8000d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fbc0 	bl	800048c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2224      	movs	r2, #36	; 0x24
 8000d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0201 	bic.w	r2, r2, #1
 8000d22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d44:	f001 fb92 	bl	800246c <HAL_RCC_GetPCLK1Freq>
 8000d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	4a81      	ldr	r2, [pc, #516]	; (8000f54 <HAL_I2C_Init+0x274>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d807      	bhi.n	8000d64 <HAL_I2C_Init+0x84>
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4a80      	ldr	r2, [pc, #512]	; (8000f58 <HAL_I2C_Init+0x278>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	bf94      	ite	ls
 8000d5c:	2301      	movls	r3, #1
 8000d5e:	2300      	movhi	r3, #0
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	e006      	b.n	8000d72 <HAL_I2C_Init+0x92>
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4a7d      	ldr	r2, [pc, #500]	; (8000f5c <HAL_I2C_Init+0x27c>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	bf94      	ite	ls
 8000d6c:	2301      	movls	r3, #1
 8000d6e:	2300      	movhi	r3, #0
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e0e7      	b.n	8000f4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4a78      	ldr	r2, [pc, #480]	; (8000f60 <HAL_I2C_Init+0x280>)
 8000d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d82:	0c9b      	lsrs	r3, r3, #18
 8000d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6a1b      	ldr	r3, [r3, #32]
 8000da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	4a6a      	ldr	r2, [pc, #424]	; (8000f54 <HAL_I2C_Init+0x274>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d802      	bhi.n	8000db4 <HAL_I2C_Init+0xd4>
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	3301      	adds	r3, #1
 8000db2:	e009      	b.n	8000dc8 <HAL_I2C_Init+0xe8>
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000dba:	fb02 f303 	mul.w	r3, r2, r3
 8000dbe:	4a69      	ldr	r2, [pc, #420]	; (8000f64 <HAL_I2C_Init+0x284>)
 8000dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc4:	099b      	lsrs	r3, r3, #6
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	6812      	ldr	r2, [r2, #0]
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000dda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	495c      	ldr	r1, [pc, #368]	; (8000f54 <HAL_I2C_Init+0x274>)
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d819      	bhi.n	8000e1c <HAL_I2C_Init+0x13c>
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	1e59      	subs	r1, r3, #1
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000df6:	1c59      	adds	r1, r3, #1
 8000df8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000dfc:	400b      	ands	r3, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00a      	beq.n	8000e18 <HAL_I2C_Init+0x138>
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	1e59      	subs	r1, r3, #1
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e10:	3301      	adds	r3, #1
 8000e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e16:	e051      	b.n	8000ebc <HAL_I2C_Init+0x1dc>
 8000e18:	2304      	movs	r3, #4
 8000e1a:	e04f      	b.n	8000ebc <HAL_I2C_Init+0x1dc>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d111      	bne.n	8000e48 <HAL_I2C_Init+0x168>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	1e58      	subs	r0, r3, #1
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6859      	ldr	r1, [r3, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	440b      	add	r3, r1
 8000e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e36:	3301      	adds	r3, #1
 8000e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	bf0c      	ite	eq
 8000e40:	2301      	moveq	r3, #1
 8000e42:	2300      	movne	r3, #0
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	e012      	b.n	8000e6e <HAL_I2C_Init+0x18e>
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	1e58      	subs	r0, r3, #1
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6859      	ldr	r1, [r3, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	0099      	lsls	r1, r3, #2
 8000e58:	440b      	add	r3, r1
 8000e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e5e:	3301      	adds	r3, #1
 8000e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bf0c      	ite	eq
 8000e68:	2301      	moveq	r3, #1
 8000e6a:	2300      	movne	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_I2C_Init+0x196>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e022      	b.n	8000ebc <HAL_I2C_Init+0x1dc>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10e      	bne.n	8000e9c <HAL_I2C_Init+0x1bc>
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	1e58      	subs	r0, r3, #1
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6859      	ldr	r1, [r3, #4]
 8000e86:	460b      	mov	r3, r1
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	440b      	add	r3, r1
 8000e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e90:	3301      	adds	r3, #1
 8000e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e9a:	e00f      	b.n	8000ebc <HAL_I2C_Init+0x1dc>
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	1e58      	subs	r0, r3, #1
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6859      	ldr	r1, [r3, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	0099      	lsls	r1, r3, #2
 8000eac:	440b      	add	r3, r1
 8000eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	6809      	ldr	r1, [r1, #0]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69da      	ldr	r2, [r3, #28]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a1b      	ldr	r3, [r3, #32]
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	6911      	ldr	r1, [r2, #16]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	68d2      	ldr	r2, [r2, #12]
 8000ef6:	4311      	orrs	r1, r2
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	6812      	ldr	r2, [r2, #0]
 8000efc:	430b      	orrs	r3, r1
 8000efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695a      	ldr	r2, [r3, #20]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f042 0201 	orr.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2220      	movs	r2, #32
 8000f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	000186a0 	.word	0x000186a0
 8000f58:	001e847f 	.word	0x001e847f
 8000f5c:	003d08ff 	.word	0x003d08ff
 8000f60:	431bde83 	.word	0x431bde83
 8000f64:	10624dd3 	.word	0x10624dd3

08000f68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	461a      	mov	r2, r3
 8000f74:	460b      	mov	r3, r1
 8000f76:	817b      	strh	r3, [r7, #10]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff fbb6 	bl	80006ec <HAL_GetTick>
 8000f80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b20      	cmp	r3, #32
 8000f8c:	f040 80e0 	bne.w	8001150 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2319      	movs	r3, #25
 8000f96:	2201      	movs	r2, #1
 8000f98:	4970      	ldr	r1, [pc, #448]	; (800115c <HAL_I2C_Master_Transmit+0x1f4>)
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f000 fcb4 	bl	8001908 <I2C_WaitOnFlagUntilTimeout>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e0d3      	b.n	8001152 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d101      	bne.n	8000fb8 <HAL_I2C_Master_Transmit+0x50>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e0cc      	b.n	8001152 <HAL_I2C_Master_Transmit+0x1ea>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d007      	beq.n	8000fde <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 0201 	orr.w	r2, r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2221      	movs	r2, #33	; 0x21
 8000ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2210      	movs	r2, #16
 8000ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2200      	movs	r2, #0
 8001002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	893a      	ldrh	r2, [r7, #8]
 800100e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001014:	b29a      	uxth	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4a50      	ldr	r2, [pc, #320]	; (8001160 <HAL_I2C_Master_Transmit+0x1f8>)
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001020:	8979      	ldrh	r1, [r7, #10]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	6a3a      	ldr	r2, [r7, #32]
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f000 fb04 	bl	8001634 <I2C_MasterRequestWrite>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e08d      	b.n	8001152 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800104c:	e066      	b.n	800111c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	6a39      	ldr	r1, [r7, #32]
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 fd2e 	bl	8001ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00d      	beq.n	800107a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	2b04      	cmp	r3, #4
 8001064:	d107      	bne.n	8001076 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001074:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e06b      	b.n	8001152 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	781a      	ldrb	r2, [r3, #0]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001094:	b29b      	uxth	r3, r3
 8001096:	3b01      	subs	r3, #1
 8001098:	b29a      	uxth	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a2:	3b01      	subs	r3, #1
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	d11b      	bne.n	80010f0 <HAL_I2C_Master_Transmit+0x188>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d017      	beq.n	80010f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	781a      	ldrb	r2, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010da:	b29b      	uxth	r3, r3
 80010dc:	3b01      	subs	r3, #1
 80010de:	b29a      	uxth	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010e8:	3b01      	subs	r3, #1
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	6a39      	ldr	r1, [r7, #32]
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f000 fd1e 	bl	8001b36 <I2C_WaitOnBTFFlagUntilTimeout>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00d      	beq.n	800111c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	2b04      	cmp	r3, #4
 8001106:	d107      	bne.n	8001118 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001116:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e01a      	b.n	8001152 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001120:	2b00      	cmp	r3, #0
 8001122:	d194      	bne.n	800104e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2220      	movs	r2, #32
 8001138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	e000      	b.n	8001152 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001150:	2302      	movs	r3, #2
  }
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	00100002 	.word	0x00100002
 8001160:	ffff0000 	.word	0xffff0000

08001164 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	4608      	mov	r0, r1
 800116e:	4611      	mov	r1, r2
 8001170:	461a      	mov	r2, r3
 8001172:	4603      	mov	r3, r0
 8001174:	817b      	strh	r3, [r7, #10]
 8001176:	460b      	mov	r3, r1
 8001178:	813b      	strh	r3, [r7, #8]
 800117a:	4613      	mov	r3, r2
 800117c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001182:	f7ff fab3 	bl	80006ec <HAL_GetTick>
 8001186:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b20      	cmp	r3, #32
 8001192:	f040 8244 	bne.w	800161e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2319      	movs	r3, #25
 800119c:	2201      	movs	r2, #1
 800119e:	4982      	ldr	r1, [pc, #520]	; (80013a8 <HAL_I2C_Mem_Read+0x244>)
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 fbb1 	bl	8001908 <I2C_WaitOnFlagUntilTimeout>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80011ac:	2302      	movs	r3, #2
 80011ae:	e237      	b.n	8001620 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d101      	bne.n	80011be <HAL_I2C_Mem_Read+0x5a>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e230      	b.n	8001620 <HAL_I2C_Mem_Read+0x4bc>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d007      	beq.n	80011e4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2222      	movs	r2, #34	; 0x22
 80011f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2240      	movs	r2, #64	; 0x40
 8001200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001214:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121a:	b29a      	uxth	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4a62      	ldr	r2, [pc, #392]	; (80013ac <HAL_I2C_Mem_Read+0x248>)
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001226:	88f8      	ldrh	r0, [r7, #6]
 8001228:	893a      	ldrh	r2, [r7, #8]
 800122a:	8979      	ldrh	r1, [r7, #10]
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	4603      	mov	r3, r0
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f000 fa7e 	bl	8001738 <I2C_RequestMemoryRead>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e1ec      	b.n	8001620 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800124a:	2b00      	cmp	r3, #0
 800124c:	d113      	bne.n	8001276 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e1c0      	b.n	80015f8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800127a:	2b01      	cmp	r3, #1
 800127c:	d11e      	bne.n	80012bc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800128c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800128e:	b672      	cpsid	i
}
 8001290:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012b8:	b662      	cpsie	i
}
 80012ba:	e035      	b.n	8001328 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d11e      	bne.n	8001302 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012fe:	b662      	cpsie	i
}
 8001300:	e012      	b.n	8001328 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001310:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001328:	e166      	b.n	80015f8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800132e:	2b03      	cmp	r3, #3
 8001330:	f200 811f 	bhi.w	8001572 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001338:	2b01      	cmp	r3, #1
 800133a:	d123      	bne.n	8001384 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800133c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f000 fc39 	bl	8001bb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e167      	b.n	8001620 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	691a      	ldr	r2, [r3, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800136c:	3b01      	subs	r3, #1
 800136e:	b29a      	uxth	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001378:	b29b      	uxth	r3, r3
 800137a:	3b01      	subs	r3, #1
 800137c:	b29a      	uxth	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001382:	e139      	b.n	80015f8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001388:	2b02      	cmp	r3, #2
 800138a:	d152      	bne.n	8001432 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001392:	2200      	movs	r2, #0
 8001394:	4906      	ldr	r1, [pc, #24]	; (80013b0 <HAL_I2C_Mem_Read+0x24c>)
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f000 fab6 	bl	8001908 <I2C_WaitOnFlagUntilTimeout>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d008      	beq.n	80013b4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e13c      	b.n	8001620 <HAL_I2C_Mem_Read+0x4bc>
 80013a6:	bf00      	nop
 80013a8:	00100002 	.word	0x00100002
 80013ac:	ffff0000 	.word	0xffff0000
 80013b0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e4:	3b01      	subs	r3, #1
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	3b01      	subs	r3, #1
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80013fa:	b662      	cpsie	i
}
 80013fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800141a:	3b01      	subs	r3, #1
 800141c:	b29a      	uxth	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001426:	b29b      	uxth	r3, r3
 8001428:	3b01      	subs	r3, #1
 800142a:	b29a      	uxth	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001430:	e0e2      	b.n	80015f8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001438:	2200      	movs	r2, #0
 800143a:	497b      	ldr	r1, [pc, #492]	; (8001628 <HAL_I2C_Mem_Read+0x4c4>)
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 fa63 	bl	8001908 <I2C_WaitOnFlagUntilTimeout>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0e9      	b.n	8001620 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800145a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	691a      	ldr	r2, [r3, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800147c:	3b01      	subs	r3, #1
 800147e:	b29a      	uxth	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001488:	b29b      	uxth	r3, r3
 800148a:	3b01      	subs	r3, #1
 800148c:	b29a      	uxth	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001492:	4b66      	ldr	r3, [pc, #408]	; (800162c <HAL_I2C_Mem_Read+0x4c8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	08db      	lsrs	r3, r3, #3
 8001498:	4a65      	ldr	r2, [pc, #404]	; (8001630 <HAL_I2C_Mem_Read+0x4cc>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	0a1a      	lsrs	r2, r3, #8
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	00da      	lsls	r2, r3, #3
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d118      	bne.n	80014ea <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2220      	movs	r2, #32
 80014c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f043 0220 	orr.w	r2, r3, #32
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80014da:	b662      	cpsie	i
}
 80014dc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e09a      	b.n	8001620 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d1d9      	bne.n	80014ac <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691a      	ldr	r2, [r3, #16]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001524:	3b01      	subs	r3, #1
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001530:	b29b      	uxth	r3, r3
 8001532:	3b01      	subs	r3, #1
 8001534:	b29a      	uxth	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800153a:	b662      	cpsie	i
}
 800153c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155a:	3b01      	subs	r3, #1
 800155c:	b29a      	uxth	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001566:	b29b      	uxth	r3, r3
 8001568:	3b01      	subs	r3, #1
 800156a:	b29a      	uxth	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001570:	e042      	b.n	80015f8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001574:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fb1e 	bl	8001bb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e04c      	b.n	8001620 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d118      	bne.n	80015f8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e2:	3b01      	subs	r3, #1
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	3b01      	subs	r3, #1
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f47f ae94 	bne.w	800132a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2220      	movs	r2, #32
 8001606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800161e:	2302      	movs	r3, #2
  }
}
 8001620:	4618      	mov	r0, r3
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	00010004 	.word	0x00010004
 800162c:	20000000 	.word	0x20000000
 8001630:	14f8b589 	.word	0x14f8b589

08001634 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af02      	add	r7, sp, #8
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	460b      	mov	r3, r1
 8001642:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b08      	cmp	r3, #8
 800164e:	d006      	beq.n	800165e <I2C_MasterRequestWrite+0x2a>
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d003      	beq.n	800165e <I2C_MasterRequestWrite+0x2a>
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800165c:	d108      	bne.n	8001670 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	e00b      	b.n	8001688 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	2b12      	cmp	r3, #18
 8001676:	d107      	bne.n	8001688 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001686:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 f937 	bl	8001908 <I2C_WaitOnFlagUntilTimeout>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00d      	beq.n	80016bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ae:	d103      	bne.n	80016b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e035      	b.n	8001728 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016c4:	d108      	bne.n	80016d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016c6:	897b      	ldrh	r3, [r7, #10]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	461a      	mov	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80016d4:	611a      	str	r2, [r3, #16]
 80016d6:	e01b      	b.n	8001710 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80016d8:	897b      	ldrh	r3, [r7, #10]
 80016da:	11db      	asrs	r3, r3, #7
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f003 0306 	and.w	r3, r3, #6
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f063 030f 	orn	r3, r3, #15
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	490e      	ldr	r1, [pc, #56]	; (8001730 <I2C_MasterRequestWrite+0xfc>)
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 f95d 	bl	80019b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e010      	b.n	8001728 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001706:	897b      	ldrh	r3, [r7, #10]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	4907      	ldr	r1, [pc, #28]	; (8001734 <I2C_MasterRequestWrite+0x100>)
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f94d 	bl	80019b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	00010008 	.word	0x00010008
 8001734:	00010002 	.word	0x00010002

08001738 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af02      	add	r7, sp, #8
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	4608      	mov	r0, r1
 8001742:	4611      	mov	r1, r2
 8001744:	461a      	mov	r2, r3
 8001746:	4603      	mov	r3, r0
 8001748:	817b      	strh	r3, [r7, #10]
 800174a:	460b      	mov	r3, r1
 800174c:	813b      	strh	r3, [r7, #8]
 800174e:	4613      	mov	r3, r2
 8001750:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001760:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001770:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	2200      	movs	r2, #0
 800177a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 f8c2 	bl	8001908 <I2C_WaitOnFlagUntilTimeout>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00d      	beq.n	80017a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001798:	d103      	bne.n	80017a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0aa      	b.n	80018fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017a6:	897b      	ldrh	r3, [r7, #10]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	6a3a      	ldr	r2, [r7, #32]
 80017ba:	4952      	ldr	r1, [pc, #328]	; (8001904 <I2C_RequestMemoryRead+0x1cc>)
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 f8fa 	bl	80019b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e097      	b.n	80018fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e4:	6a39      	ldr	r1, [r7, #32]
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 f964 	bl	8001ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00d      	beq.n	800180e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d107      	bne.n	800180a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001808:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e076      	b.n	80018fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d105      	bne.n	8001820 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001814:	893b      	ldrh	r3, [r7, #8]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	e021      	b.n	8001864 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001820:	893b      	ldrh	r3, [r7, #8]
 8001822:	0a1b      	lsrs	r3, r3, #8
 8001824:	b29b      	uxth	r3, r3
 8001826:	b2da      	uxtb	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800182e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001830:	6a39      	ldr	r1, [r7, #32]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 f93e 	bl	8001ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00d      	beq.n	800185a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	2b04      	cmp	r3, #4
 8001844:	d107      	bne.n	8001856 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001854:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e050      	b.n	80018fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800185a:	893b      	ldrh	r3, [r7, #8]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001866:	6a39      	ldr	r1, [r7, #32]
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 f923 	bl	8001ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00d      	beq.n	8001890 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	2b04      	cmp	r3, #4
 800187a:	d107      	bne.n	800188c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e035      	b.n	80018fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800189e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 f82b 	bl	8001908 <I2C_WaitOnFlagUntilTimeout>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00d      	beq.n	80018d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c6:	d103      	bne.n	80018d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e013      	b.n	80018fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018d4:	897b      	ldrh	r3, [r7, #10]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	6a3a      	ldr	r2, [r7, #32]
 80018e8:	4906      	ldr	r1, [pc, #24]	; (8001904 <I2C_RequestMemoryRead+0x1cc>)
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 f863 	bl	80019b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	00010002 	.word	0x00010002

08001908 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	4613      	mov	r3, r2
 8001916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001918:	e025      	b.n	8001966 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d021      	beq.n	8001966 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001922:	f7fe fee3 	bl	80006ec <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d302      	bcc.n	8001938 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d116      	bne.n	8001966 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2220      	movs	r2, #32
 8001942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f043 0220 	orr.w	r2, r3, #32
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e023      	b.n	80019ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d10d      	bne.n	800198c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4013      	ands	r3, r2
 800197c:	b29b      	uxth	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf0c      	ite	eq
 8001982:	2301      	moveq	r3, #1
 8001984:	2300      	movne	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	e00c      	b.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4013      	ands	r3, r2
 8001998:	b29b      	uxth	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	bf0c      	ite	eq
 800199e:	2301      	moveq	r3, #1
 80019a0:	2300      	movne	r3, #0
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d0b6      	beq.n	800191a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019c4:	e051      	b.n	8001a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d4:	d123      	bne.n	8001a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2220      	movs	r2, #32
 80019fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f043 0204 	orr.w	r2, r3, #4
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e046      	b.n	8001aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a24:	d021      	beq.n	8001a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a26:	f7fe fe61 	bl	80006ec <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d302      	bcc.n	8001a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d116      	bne.n	8001a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2220      	movs	r2, #32
 8001a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f043 0220 	orr.w	r2, r3, #32
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e020      	b.n	8001aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	0c1b      	lsrs	r3, r3, #16
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d10c      	bne.n	8001a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	bf14      	ite	ne
 8001a86:	2301      	movne	r3, #1
 8001a88:	2300      	moveq	r3, #0
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	e00b      	b.n	8001aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	43da      	mvns	r2, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf14      	ite	ne
 8001aa0:	2301      	movne	r3, #1
 8001aa2:	2300      	moveq	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d18d      	bne.n	80019c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ac0:	e02d      	b.n	8001b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 f8ce 	bl	8001c64 <I2C_IsAcknowledgeFailed>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e02d      	b.n	8001b2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad8:	d021      	beq.n	8001b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ada:	f7fe fe07 	bl	80006ec <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d302      	bcc.n	8001af0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d116      	bne.n	8001b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2220      	movs	r2, #32
 8001afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f043 0220 	orr.w	r2, r3, #32
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e007      	b.n	8001b2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b28:	2b80      	cmp	r3, #128	; 0x80
 8001b2a:	d1ca      	bne.n	8001ac2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b42:	e02d      	b.n	8001ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 f88d 	bl	8001c64 <I2C_IsAcknowledgeFailed>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e02d      	b.n	8001bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5a:	d021      	beq.n	8001ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5c:	f7fe fdc6 	bl	80006ec <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d302      	bcc.n	8001b72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d116      	bne.n	8001ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f043 0220 	orr.w	r2, r3, #32
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e007      	b.n	8001bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d1ca      	bne.n	8001b44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001bc4:	e042      	b.n	8001c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2b10      	cmp	r3, #16
 8001bd2:	d119      	bne.n	8001c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0210 	mvn.w	r2, #16
 8001bdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2220      	movs	r2, #32
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e029      	b.n	8001c5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c08:	f7fe fd70 	bl	80006ec <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d302      	bcc.n	8001c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d116      	bne.n	8001c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f043 0220 	orr.w	r2, r3, #32
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e007      	b.n	8001c5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c56:	2b40      	cmp	r3, #64	; 0x40
 8001c58:	d1b5      	bne.n	8001bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7a:	d11b      	bne.n	8001cb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f043 0204 	orr.w	r2, r3, #4
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e26c      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8087 	beq.w	8001dee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce0:	4b92      	ldr	r3, [pc, #584]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d00c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cec:	4b8f      	ldr	r3, [pc, #572]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d112      	bne.n	8001d1e <HAL_RCC_OscConfig+0x5e>
 8001cf8:	4b8c      	ldr	r3, [pc, #560]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d04:	d10b      	bne.n	8001d1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d06:	4b89      	ldr	r3, [pc, #548]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d06c      	beq.n	8001dec <HAL_RCC_OscConfig+0x12c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d168      	bne.n	8001dec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e246      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d26:	d106      	bne.n	8001d36 <HAL_RCC_OscConfig+0x76>
 8001d28:	4b80      	ldr	r3, [pc, #512]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a7f      	ldr	r2, [pc, #508]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	e02e      	b.n	8001d94 <HAL_RCC_OscConfig+0xd4>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x98>
 8001d3e:	4b7b      	ldr	r3, [pc, #492]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a7a      	ldr	r2, [pc, #488]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b78      	ldr	r3, [pc, #480]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a77      	ldr	r2, [pc, #476]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e01d      	b.n	8001d94 <HAL_RCC_OscConfig+0xd4>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0xbc>
 8001d62:	4b72      	ldr	r3, [pc, #456]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a71      	ldr	r2, [pc, #452]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b6f      	ldr	r3, [pc, #444]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a6e      	ldr	r2, [pc, #440]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e00b      	b.n	8001d94 <HAL_RCC_OscConfig+0xd4>
 8001d7c:	4b6b      	ldr	r3, [pc, #428]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a6a      	ldr	r2, [pc, #424]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b68      	ldr	r3, [pc, #416]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a67      	ldr	r2, [pc, #412]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d013      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7fe fca6 	bl	80006ec <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da4:	f7fe fca2 	bl	80006ec <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1fa      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b5d      	ldr	r3, [pc, #372]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0xe4>
 8001dc2:	e014      	b.n	8001dee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7fe fc92 	bl	80006ec <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dcc:	f7fe fc8e 	bl	80006ec <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b64      	cmp	r3, #100	; 0x64
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e1e6      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dde:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x10c>
 8001dea:	e000      	b.n	8001dee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d063      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dfa:	4b4c      	ldr	r3, [pc, #304]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e06:	4b49      	ldr	r3, [pc, #292]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d11c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x18c>
 8001e12:	4b46      	ldr	r3, [pc, #280]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d116      	bne.n	8001e4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1e:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_RCC_OscConfig+0x176>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e1ba      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4939      	ldr	r1, [pc, #228]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	e03a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e54:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_RCC_OscConfig+0x270>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fc47 	bl	80006ec <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e62:	f7fe fc43 	bl	80006ec <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e19b      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e80:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4927      	ldr	r1, [pc, #156]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]
 8001e94:	e015      	b.n	8001ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <HAL_RCC_OscConfig+0x270>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7fe fc26 	bl	80006ec <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea4:	f7fe fc22 	bl	80006ec <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e17a      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d03a      	beq.n	8001f44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d019      	beq.n	8001f0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed6:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001edc:	f7fe fc06 	bl	80006ec <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7fe fc02 	bl	80006ec <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e15a      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f000 fada 	bl	80024bc <RCC_Delay>
 8001f08:	e01c      	b.n	8001f44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f10:	f7fe fbec 	bl	80006ec <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f16:	e00f      	b.n	8001f38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f18:	f7fe fbe8 	bl	80006ec <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d908      	bls.n	8001f38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e140      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	42420000 	.word	0x42420000
 8001f34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f38:	4b9e      	ldr	r3, [pc, #632]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1e9      	bne.n	8001f18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80a6 	beq.w	800209e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f56:	4b97      	ldr	r3, [pc, #604]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10d      	bne.n	8001f7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	4b94      	ldr	r3, [pc, #592]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	4a93      	ldr	r2, [pc, #588]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	61d3      	str	r3, [r2, #28]
 8001f6e:	4b91      	ldr	r3, [pc, #580]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7e:	4b8e      	ldr	r3, [pc, #568]	; (80021b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d118      	bne.n	8001fbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8a:	4b8b      	ldr	r3, [pc, #556]	; (80021b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a8a      	ldr	r2, [pc, #552]	; (80021b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f96:	f7fe fba9 	bl	80006ec <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9e:	f7fe fba5 	bl	80006ec <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b64      	cmp	r3, #100	; 0x64
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e0fd      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb0:	4b81      	ldr	r3, [pc, #516]	; (80021b8 <HAL_RCC_OscConfig+0x4f8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x312>
 8001fc4:	4b7b      	ldr	r3, [pc, #492]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a7a      	ldr	r2, [pc, #488]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6213      	str	r3, [r2, #32]
 8001fd0:	e02d      	b.n	800202e <HAL_RCC_OscConfig+0x36e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x334>
 8001fda:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a75      	ldr	r2, [pc, #468]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6213      	str	r3, [r2, #32]
 8001fe6:	4b73      	ldr	r3, [pc, #460]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a72      	ldr	r2, [pc, #456]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	f023 0304 	bic.w	r3, r3, #4
 8001ff0:	6213      	str	r3, [r2, #32]
 8001ff2:	e01c      	b.n	800202e <HAL_RCC_OscConfig+0x36e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b05      	cmp	r3, #5
 8001ffa:	d10c      	bne.n	8002016 <HAL_RCC_OscConfig+0x356>
 8001ffc:	4b6d      	ldr	r3, [pc, #436]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4a6c      	ldr	r2, [pc, #432]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	6213      	str	r3, [r2, #32]
 8002008:	4b6a      	ldr	r3, [pc, #424]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4a69      	ldr	r2, [pc, #420]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6213      	str	r3, [r2, #32]
 8002014:	e00b      	b.n	800202e <HAL_RCC_OscConfig+0x36e>
 8002016:	4b67      	ldr	r3, [pc, #412]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4a66      	ldr	r2, [pc, #408]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	6213      	str	r3, [r2, #32]
 8002022:	4b64      	ldr	r3, [pc, #400]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4a63      	ldr	r2, [pc, #396]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d015      	beq.n	8002062 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7fe fb59 	bl	80006ec <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7fe fb55 	bl	80006ec <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e0ab      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002054:	4b57      	ldr	r3, [pc, #348]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ee      	beq.n	800203e <HAL_RCC_OscConfig+0x37e>
 8002060:	e014      	b.n	800208c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7fe fb43 	bl	80006ec <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002068:	e00a      	b.n	8002080 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206a:	f7fe fb3f 	bl	80006ec <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	f241 3288 	movw	r2, #5000	; 0x1388
 8002078:	4293      	cmp	r3, r2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e095      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002080:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1ee      	bne.n	800206a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d105      	bne.n	800209e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002092:	4b48      	ldr	r3, [pc, #288]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4a47      	ldr	r2, [pc, #284]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800209c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 8081 	beq.w	80021aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a8:	4b42      	ldr	r3, [pc, #264]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d061      	beq.n	8002178 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d146      	bne.n	800214a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020bc:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_RCC_OscConfig+0x4fc>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7fe fb13 	bl	80006ec <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ca:	f7fe fb0f 	bl	80006ec <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e067      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020dc:	4b35      	ldr	r3, [pc, #212]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f0:	d108      	bne.n	8002104 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020f2:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	492d      	ldr	r1, [pc, #180]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002104:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a19      	ldr	r1, [r3, #32]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	430b      	orrs	r3, r1
 8002116:	4927      	ldr	r1, [pc, #156]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800211c:	4b27      	ldr	r3, [pc, #156]	; (80021bc <HAL_RCC_OscConfig+0x4fc>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7fe fae3 	bl	80006ec <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212a:	f7fe fadf 	bl	80006ec <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e037      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x46a>
 8002148:	e02f      	b.n	80021aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_RCC_OscConfig+0x4fc>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7fe facc 	bl	80006ec <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe fac8 	bl	80006ec <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e020      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x498>
 8002176:	e018      	b.n	80021aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e013      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	429a      	cmp	r2, r3
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40007000 	.word	0x40007000
 80021bc:	42420060 	.word	0x42420060

080021c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0d0      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021d4:	4b6a      	ldr	r3, [pc, #424]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d910      	bls.n	8002204 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b67      	ldr	r3, [pc, #412]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 0207 	bic.w	r2, r3, #7
 80021ea:	4965      	ldr	r1, [pc, #404]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b63      	ldr	r3, [pc, #396]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0b8      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800221c:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a58      	ldr	r2, [pc, #352]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002226:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002234:	4b53      	ldr	r3, [pc, #332]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4a52      	ldr	r2, [pc, #328]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800223e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002240:	4b50      	ldr	r3, [pc, #320]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	494d      	ldr	r1, [pc, #308]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d040      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b47      	ldr	r3, [pc, #284]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d115      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e07f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227e:	4b41      	ldr	r3, [pc, #260]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d109      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e073      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228e:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e06b      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800229e:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f023 0203 	bic.w	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4936      	ldr	r1, [pc, #216]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b0:	f7fe fa1c 	bl	80006ec <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b8:	f7fe fa18 	bl	80006ec <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e053      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 020c 	and.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1eb      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d210      	bcs.n	8002310 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 0207 	bic.w	r2, r3, #7
 80022f6:	4922      	ldr	r1, [pc, #136]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e032      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4916      	ldr	r1, [pc, #88]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	490e      	ldr	r1, [pc, #56]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800234e:	f000 f821 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8002352:	4602      	mov	r2, r0
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	490a      	ldr	r1, [pc, #40]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 8002360:	5ccb      	ldrb	r3, [r1, r3]
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	4a09      	ldr	r2, [pc, #36]	; (800238c <HAL_RCC_ClockConfig+0x1cc>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_RCC_ClockConfig+0x1d0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe f97a 	bl	8000668 <HAL_InitTick>

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40022000 	.word	0x40022000
 8002384:	40021000 	.word	0x40021000
 8002388:	0800290c 	.word	0x0800290c
 800238c:	20000000 	.word	0x20000000
 8002390:	20000004 	.word	0x20000004

08002394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002394:	b490      	push	{r4, r7}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <HAL_RCC_GetSysClockFreq+0xb0>)
 800239c:	1d3c      	adds	r4, r7, #4
 800239e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023a4:	f240 2301 	movw	r3, #513	; 0x201
 80023a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d002      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x40>
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d003      	beq.n	80023da <HAL_RCC_GetSysClockFreq+0x46>
 80023d2:	e02d      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023d4:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d6:	623b      	str	r3, [r7, #32]
      break;
 80023d8:	e02d      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	0c9b      	lsrs	r3, r3, #18
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023e6:	4413      	add	r3, r2
 80023e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	0c5b      	lsrs	r3, r3, #17
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002406:	4413      	add	r3, r2
 8002408:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800240c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	4a0e      	ldr	r2, [pc, #56]	; (800244c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002412:	fb02 f203 	mul.w	r2, r2, r3
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	fbb2 f3f3 	udiv	r3, r2, r3
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	e004      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002424:	fb02 f303 	mul.w	r3, r2, r3
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	623b      	str	r3, [r7, #32]
      break;
 800242e:	e002      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002432:	623b      	str	r3, [r7, #32]
      break;
 8002434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002436:	6a3b      	ldr	r3, [r7, #32]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3728      	adds	r7, #40	; 0x28
 800243c:	46bd      	mov	sp, r7
 800243e:	bc90      	pop	{r4, r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	080028fc 	.word	0x080028fc
 8002448:	40021000 	.word	0x40021000
 800244c:	00f42400 	.word	0x00f42400
 8002450:	003d0900 	.word	0x003d0900
 8002454:	007a1200 	.word	0x007a1200

08002458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800245c:	4b02      	ldr	r3, [pc, #8]	; (8002468 <HAL_RCC_GetHCLKFreq+0x10>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	20000000 	.word	0x20000000

0800246c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002470:	f7ff fff2 	bl	8002458 <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	0a1b      	lsrs	r3, r3, #8
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4903      	ldr	r1, [pc, #12]	; (8002490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	0800291c 	.word	0x0800291c

08002494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002498:	f7ff ffde 	bl	8002458 <HAL_RCC_GetHCLKFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	0adb      	lsrs	r3, r3, #11
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4903      	ldr	r1, [pc, #12]	; (80024b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000
 80024b8:	0800291c 	.word	0x0800291c

080024bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024c4:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <RCC_Delay+0x34>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <RCC_Delay+0x38>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	0a5b      	lsrs	r3, r3, #9
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024d8:	bf00      	nop
  }
  while (Delay --);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1e5a      	subs	r2, r3, #1
 80024de:	60fa      	str	r2, [r7, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f9      	bne.n	80024d8 <RCC_Delay+0x1c>
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	20000000 	.word	0x20000000
 80024f4:	10624dd3 	.word	0x10624dd3

080024f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e03f      	b.n	800258a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fd fff2 	bl	8000508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2224      	movs	r2, #36	; 0x24
 8002528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800253a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f905 	bl	800274c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b08a      	sub	sp, #40	; 0x28
 8002596:	af02      	add	r7, sp, #8
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	4613      	mov	r3, r2
 80025a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d17c      	bne.n	80026ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <HAL_UART_Transmit+0x2c>
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e075      	b.n	80026ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_UART_Transmit+0x3e>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e06e      	b.n	80026ae <HAL_UART_Transmit+0x11c>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2221      	movs	r2, #33	; 0x21
 80025e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80025e6:	f7fe f881 	bl	80006ec <HAL_GetTick>
 80025ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	88fa      	ldrh	r2, [r7, #6]
 80025f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	88fa      	ldrh	r2, [r7, #6]
 80025f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002600:	d108      	bne.n	8002614 <HAL_UART_Transmit+0x82>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d104      	bne.n	8002614 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	e003      	b.n	800261c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002624:	e02a      	b.n	800267c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2200      	movs	r2, #0
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f840 	bl	80026b6 <UART_WaitOnFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e036      	b.n	80026ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10b      	bne.n	800265e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002654:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	3302      	adds	r3, #2
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	e007      	b.n	800266e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	3301      	adds	r3, #1
 800266c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1cf      	bne.n	8002626 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2200      	movs	r2, #0
 800268e:	2140      	movs	r1, #64	; 0x40
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f810 	bl	80026b6 <UART_WaitOnFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e006      	b.n	80026ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e000      	b.n	80026ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026ac:	2302      	movs	r3, #2
  }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	4613      	mov	r3, r2
 80026c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026c6:	e02c      	b.n	8002722 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ce:	d028      	beq.n	8002722 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80026d6:	f7fe f809 	bl	80006ec <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d21d      	bcs.n	8002722 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0201 	bic.w	r2, r2, #1
 8002704:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e00f      	b.n	8002742 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4013      	ands	r3, r2
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	429a      	cmp	r2, r3
 8002730:	bf0c      	ite	eq
 8002732:	2301      	moveq	r3, #1
 8002734:	2300      	movne	r3, #0
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	429a      	cmp	r2, r3
 800273e:	d0c3      	beq.n	80026c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002786:	f023 030c 	bic.w	r3, r3, #12
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	430b      	orrs	r3, r1
 8002792:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a2c      	ldr	r2, [pc, #176]	; (8002860 <UART_SetConfig+0x114>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d103      	bne.n	80027bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027b4:	f7ff fe6e 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	e002      	b.n	80027c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027bc:	f7ff fe56 	bl	800246c <HAL_RCC_GetPCLK1Freq>
 80027c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	009a      	lsls	r2, r3, #2
 80027cc:	441a      	add	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	4a22      	ldr	r2, [pc, #136]	; (8002864 <UART_SetConfig+0x118>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	0119      	lsls	r1, r3, #4
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	009a      	lsls	r2, r3, #2
 80027ec:	441a      	add	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027f8:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <UART_SetConfig+0x118>)
 80027fa:	fba3 0302 	umull	r0, r3, r3, r2
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2064      	movs	r0, #100	; 0x64
 8002802:	fb00 f303 	mul.w	r3, r0, r3
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	3332      	adds	r3, #50	; 0x32
 800280c:	4a15      	ldr	r2, [pc, #84]	; (8002864 <UART_SetConfig+0x118>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002818:	4419      	add	r1, r3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	009a      	lsls	r2, r3, #2
 8002824:	441a      	add	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <UART_SetConfig+0x118>)
 8002832:	fba3 0302 	umull	r0, r3, r3, r2
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	2064      	movs	r0, #100	; 0x64
 800283a:	fb00 f303 	mul.w	r3, r0, r3
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	3332      	adds	r3, #50	; 0x32
 8002844:	4a07      	ldr	r2, [pc, #28]	; (8002864 <UART_SetConfig+0x118>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	f003 020f 	and.w	r2, r3, #15
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	440a      	add	r2, r1
 8002856:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002858:	bf00      	nop
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40013800 	.word	0x40013800
 8002864:	51eb851f 	.word	0x51eb851f

08002868 <__libc_init_array>:
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	2600      	movs	r6, #0
 800286c:	4d0c      	ldr	r5, [pc, #48]	; (80028a0 <__libc_init_array+0x38>)
 800286e:	4c0d      	ldr	r4, [pc, #52]	; (80028a4 <__libc_init_array+0x3c>)
 8002870:	1b64      	subs	r4, r4, r5
 8002872:	10a4      	asrs	r4, r4, #2
 8002874:	42a6      	cmp	r6, r4
 8002876:	d109      	bne.n	800288c <__libc_init_array+0x24>
 8002878:	f000 f822 	bl	80028c0 <_init>
 800287c:	2600      	movs	r6, #0
 800287e:	4d0a      	ldr	r5, [pc, #40]	; (80028a8 <__libc_init_array+0x40>)
 8002880:	4c0a      	ldr	r4, [pc, #40]	; (80028ac <__libc_init_array+0x44>)
 8002882:	1b64      	subs	r4, r4, r5
 8002884:	10a4      	asrs	r4, r4, #2
 8002886:	42a6      	cmp	r6, r4
 8002888:	d105      	bne.n	8002896 <__libc_init_array+0x2e>
 800288a:	bd70      	pop	{r4, r5, r6, pc}
 800288c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002890:	4798      	blx	r3
 8002892:	3601      	adds	r6, #1
 8002894:	e7ee      	b.n	8002874 <__libc_init_array+0xc>
 8002896:	f855 3b04 	ldr.w	r3, [r5], #4
 800289a:	4798      	blx	r3
 800289c:	3601      	adds	r6, #1
 800289e:	e7f2      	b.n	8002886 <__libc_init_array+0x1e>
 80028a0:	08002924 	.word	0x08002924
 80028a4:	08002924 	.word	0x08002924
 80028a8:	08002924 	.word	0x08002924
 80028ac:	08002928 	.word	0x08002928

080028b0 <memset>:
 80028b0:	4603      	mov	r3, r0
 80028b2:	4402      	add	r2, r0
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d100      	bne.n	80028ba <memset+0xa>
 80028b8:	4770      	bx	lr
 80028ba:	f803 1b01 	strb.w	r1, [r3], #1
 80028be:	e7f9      	b.n	80028b4 <memset+0x4>

080028c0 <_init>:
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	bf00      	nop
 80028c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c6:	bc08      	pop	{r3}
 80028c8:	469e      	mov	lr, r3
 80028ca:	4770      	bx	lr

080028cc <_fini>:
 80028cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ce:	bf00      	nop
 80028d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d2:	bc08      	pop	{r3}
 80028d4:	469e      	mov	lr, r3
 80028d6:	4770      	bx	lr
